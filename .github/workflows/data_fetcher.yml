name: Fetch and Update Gold Data

on:
  schedule:
    - cron: "40 14 * * *"   # Optional: Runs daily at 20:10 IST
    
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # allows manual trigger from GitHub UI

permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'   # stable version

      # 3️⃣ Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4️⃣ Set environment variables (Postgres credentials)
      - name: Set environment variables
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          echo "✅ Environment variables loaded"

      # 5️⃣ Test PostgreSQL connection
      - name: Test PostgreSQL connection
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          python - <<'EOF'
          import os
          import psycopg2

          try:
              conn = psycopg2.connect(
                  host=os.getenv("DB_HOST"),
                  user=os.getenv("DB_USER"),
                  password=os.getenv("DB_PASS"),
                  dbname=os.getenv("DB_NAME")
              )
              print("✅ PostgreSQL connection successful")
              conn.close()
          except Exception as e:
              print("❌ PostgreSQL connection failed:", e)
          EOF

            # 6️⃣ Run data fetch & update script

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Run data fetch & update
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          python src/data_preprocess.py 
      
      - name: Track new snapshot with DVC
        run: |
          mkdir -p data/raw  # ✅ Ensure folder exists
          dvc add data/raw/gold_snapshot_${{ steps.date.outputs.date }}.csv
          git add data/raw/gold_snapshot_${{ steps.date.outputs.date }}.csv.dvc .gitignore

      - name: Commit updated data snapshot
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git fetch --prune --unshallow || echo "Already full clone"
          git checkout main
          git pull origin main

          git add data/raw/gold_snapshot_${{ steps.date.outputs.date }}.csv

          git commit -m "Saved latest data version" || echo "No changes to commit"
          git push origin main
      
      - name: "Adding files to dvc for tracking"
        run:  |
          dvc push